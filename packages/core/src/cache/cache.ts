import { GraphQLSchema } from 'graphql';
import LRU from 'lru-cache';
import { LoadedFlatbreadConfig } from '../types';
import createShaHash from '../utils/createShaHash';

type SchemaCacheKey = string;

interface FlatbreadCache {
  schema: LRU<SchemaCacheKey, GraphQLSchema>;
}

/**
 * A general cache for computationally heavy operations in Flatbread.
 */
export const cache: FlatbreadCache = {
  /**
   * An LRU cache for GraphQL schemas generated by Flatbread.
   */
  schema: new LRU({
    max: 100,
  }),
};

/**
 * Setter function for caching the GraphQL schema generated by Flatbread.
 */
export function cacheSchema(
  config: LoadedFlatbreadConfig,
  schema: GraphQLSchema
) {
  const schemaHashKey = createShaHash(config);
  cache.schema.set(schemaHashKey, schema);
}

/**
 * Getter function for retrieving the GraphQL schema generated by Flatbread for a given config.
 */
export function checkCacheForSchema(
  config: LoadedFlatbreadConfig
): GraphQLSchema | undefined {
  const schemaHashKey = createShaHash(config);
  return cache.schema.get(schemaHashKey);
}
