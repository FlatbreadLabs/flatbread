import { LRUCache } from 'lru-cache';
import { GraphQLSchema } from 'graphql';
import { createHash } from 'node:crypto';
import { LoadedFlatbreadConfig } from '../types';
import { anyToString } from '../utils/stringUtils';

type SchemaCacheKey = string;

interface FlatbreadCache {
  schema: LRUCache<string, GraphQLSchema>;
}

/**
 * A general cache for computationally heavy operations in Flatbread.
 */
export const cache: FlatbreadCache = {
  /**
   * An LRU cache for GraphQL schemas generated by Flatbread.
   */
  schema: new LRUCache({
    max: 10,
  }),
};

/**
 * Setter function for caching the GraphQL schema generated by Flatbread.
 */
export function cacheSchema(
  config: LoadedFlatbreadConfig,
  schema: GraphQLSchema
) {
  const schemaHashKey = getSchemaHash(config);
  cache.schema.set(schemaHashKey, schema);
}

/**
 * Getter function for retrieving the GraphQL schema generated by Flatbread for a given config.
 */
export function checkCacheForSchema(
  config: LoadedFlatbreadConfig
): GraphQLSchema | undefined {
  const schemaHashKey = getSchemaHash(config);
  return cache.schema.get(schemaHashKey);
}

/**
 * Generates a hash key for a given Flatbread config.
 */
export function getSchemaHash(config: LoadedFlatbreadConfig) {
  return createHash('md5').update(anyToString(config)).digest('hex');
}
